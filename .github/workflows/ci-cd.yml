name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VM_HOST: 192.168.220.128
  VM_USERNAME: rodrigo
  VM_SSH_KEY: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCFj1Q8dlUeMk4nDdVNs/CLPDVRyjklpl3VQjz+Ce0WWCEFFpWNpu/HVVbE+9d21iJhTCROaK3Bdf+WpIy3dZDfBrSCPgb18i1wpqK24yB07PNPuKikMaNNvojkR0xN2k0V8Slmo4F/xppqBWIDzntsi/wOehf2Bc7YRdDhE4TYI1st+DQH+kFQKVg4fa1rZ2taPfNNTFExdVaJLToWOGMJFoeNe05Q2pR43J1YSNx0vaBT+6Kkvc8N1UG0Mk56D0S8lTQY4bx5LgGewPf11dNdcixkIpZpLlBZMu+VlngrMo/W37jYlmaTrFyBW2x2V1VQQulYfP3uFN0WvnbE35dLgZpbigXcnPc4EbCmwpeNVLt09cyrlHWrnvLj3UyELsopHDU2FEYN1uqua92rgFP3s/lxZ+8C4y/G2SGL6cVnTRlbVHxtVIIIGGcQZv+CQQnVQ/2C6eOeOcUDInb4tRb9+XSPPvGoPYbe4xXaKEEMYG3hM6lBEfz9Vyd8fFknBGdyTZQL+limbk8B3RFB+TzA3JJkCCI/h3MSVsKXYjFUWgQEfn4JCvI6H9agl2LajpGpOByO8NSFbydRV6Ihp/gp5f+K5jFzzJOigF31YGUc/W5ifCFnV1qRp1O63+sps74bgw3Y/tV2CAHSS+mtD11bS/l26B3iL2NrhcYM+X2cfQ== github-deploy
  SONAR_TOKEN: sqp_26d8ef99c7c2ff9fb39b94de2f088fb18f33c8b1
  SONAR_HOST_URL: http://192.168.220.128:9000

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
        
    - name: Install dependencies
      run: |
        cd app
        npm ci
        
    - name: Run linting
      run: |
        cd app
        npm run lint
        
    - name: Run type checking
      run: |
        cd app
        npm run type-check
        
    - name: Run tests
      run: |
        cd app
        npm test
        
    - name: Build application
      run: |
        cd app
        npm run build

  sonarqube:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
        
    - name: Install dependencies
      run: |
        cd app
        npm ci
        
    - name: Run tests with coverage
      run: |
        cd app
        npm test -- --coverage
        
    - name: Download SonarQube Scanner
      run: |
        cd app
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip sonar-scanner-cli-4.8.0.2856-linux.zip
        export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
        
    - name: SonarQube Scan
      run: |
        cd app
        export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
        sonar-scanner \
          -Dsonar.projectKey=devops-project \
          -Dsonar.sources=src \
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
          -Dsonar.login=${{ env.SONAR_TOKEN }} \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.coverage.exclusions=**/*.test.tsx,**/*.test.ts,**/__tests__/**
          
    - name: SonarQube Quality Gate Check
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      env:
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
      with:
        scanMetadataReportFile: app/.scannerwork/report-task.txt

  build-and-push:
    needs: [test, sonarqube]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Debug variables
      run: |
        echo "VM_HOST: ${{ env.VM_HOST }}"
        echo "VM_USERNAME: ${{ env.VM_USERNAME }}"
        echo "SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}"
        if [ -z "${{ env.VM_HOST }}" ]; then
          echo "ERROR: VM_HOST is empty"
          exit 1
        fi
        if [ -z "${{ env.VM_USERNAME }}" ]; then
          echo "ERROR: VM_USERNAME is empty"
          exit 1
        fi
        if [ -z "${{ env.VM_SSH_KEY }}" ]; then
          echo "ERROR: VM_SSH_KEY is empty"
          exit 1
        fi
      
    - name: Deploy to VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ env.VM_USERNAME }}
        key: ${{ env.VM_SSH_KEY }}
        port: 22
        script: |
          # Actualizar la aplicaci√≥n
          cd /opt/devops-project
          docker-compose pull
          docker-compose down
          docker-compose up -d
          docker system prune -f
          
    - name: Health check
      run: |
        sleep 30
        curl -f http://${{ env.VM_HOST }}:3000 || exit 1 