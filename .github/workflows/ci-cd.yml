name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VM_HOST: 192.168.220.128
  VM_USERNAME: rodrigo

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
        
    - name: Install dependencies
      run: |
        cd app
        npm ci
        
    - name: Run linting
      run: |
        cd app
        npm run lint
        
    - name: Run type checking
      run: |
        cd app
        npm run type-check
        
    - name: Run tests
      run: |
        cd app
        npm test
        
    - name: Build application
      run: |
        cd app
        npm run build

  # sonarqube:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
  #       
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'
  #       cache-dependency-path: app/package-lock.json
  #       
  #   - name: Install dependencies
  #     run: |
  #       cd app
  #       npm ci
  #       
  #   - name: Run tests with coverage
  #     run: |
  #       cd app
  #       npm test -- --coverage
  #       
  #   - name: SonarQube Scan
  #     uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #     with:
  #       scannerHome: ${{ github.workspace }}/sonar-scanner
  #       args: >
  #         -Dsonar.projectKey=devops-project
  #         -Dsonar.sources=app/src
  #         -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
  #         -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  #         -Dsonar.javascript.lcov.reportPaths=app/coverage/lcov.info

  build-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Debug secrets
      run: |
        echo "VM_HOST (env): ${{ env.VM_HOST }}"
        echo "VM_USERNAME (env): ${{ env.VM_USERNAME }}"
        echo "VM_HOST (secrets): ${{ secrets.VM_HOST }}"
        echo "VM_USERNAME (secrets): ${{ secrets.VM_USERNAME }}"
        echo "VM_SSH_KEY (secrets): ${{ secrets.VM_SSH_KEY }}"
        if [ -z "${{ env.VM_HOST }}" ]; then
          echo "ERROR: VM_HOST env is empty"
          exit 1
        fi
        if [ -z "${{ env.VM_USERNAME }}" ]; then
          echo "ERROR: VM_USERNAME env is empty"
          exit 1
        fi
        if [ -z "${{ secrets.VM_SSH_KEY }}" ]; then
          echo "ERROR: VM_SSH_KEY is empty"
          exit 1
        fi
      
    - name: Deploy to VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ env.VM_USERNAME }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        script: |
          # Actualizar la aplicaci√≥n
          cd /opt/devops-project
          docker-compose pull
          docker-compose down
          docker-compose up -d
          docker system prune -f
          
    - name: Health check
      run: |
        sleep 30
        curl -f http://${{ env.VM_HOST }}:3000 || exit 1 