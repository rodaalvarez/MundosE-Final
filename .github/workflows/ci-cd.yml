name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VM_HOST: 192.168.220.128
  VM_USERNAME: rodrigo
  SONAR_TOKEN: sqp_26d8ef99c7c2ff9fb39b94de2f088fb18f33c8b1
  SONAR_HOST_URL: http://192.168.220.128:9000

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
        
    - name: Install dependencies
      run: |
        cd app
        npm ci
        
    - name: Run linting
      run: |
        cd app
        npm run lint
        
    - name: Run type checking
      run: |
        cd app
        npm run type-check
        
    - name: Run tests
      run: |
        cd app
        npm test
        
    - name: Build application
      run: |
        cd app
        npm run build

  sonarqube:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
        
    - name: Install dependencies
      run: |
        cd app
        npm ci
        
    - name: Run tests with coverage
      run: |
        cd app
        npm test -- --coverage
        
    - name: Download SonarQube Scanner
      run: |
        cd app
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip sonar-scanner-cli-4.8.0.2856-linux.zip
        export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
        
    - name: SonarQube Scan
      run: |
        cd app
        export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
        sonar-scanner \
          -Dsonar.projectKey=devops-project \
          -Dsonar.sources=src \
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
          -Dsonar.login=${{ env.SONAR_TOKEN }} \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.coverage.exclusions=**/*.test.tsx,**/*.test.ts,**/__tests__/**
          
    - name: SonarQube Quality Gate Check
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      env:
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
      with:
        scanMetadataReportFile: app/.scannerwork/report-task.txt

  build-and-push:
    needs: [test, sonarqube]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy application
      run: |
        echo "üöÄ Iniciando despliegue..."
        
        # Verificar que estamos en el directorio correcto
        if [ ! -d "/opt/devops-project" ]; then
          echo "‚ùå Directorio /opt/devops-project no encontrado"
          exit 1
        fi
        
        cd /opt/devops-project
        
        # Actualizar la aplicaci√≥n
        echo "üì¶ Actualizando contenedores..."
        docker compose pull
        
        echo "üõë Deteniendo contenedores..."
        docker compose down --remove-orphans || true
        
        echo "üöÄ Iniciando contenedores..."
        docker compose up -d --force-recreate
        
        echo "üßπ Limpiando recursos no utilizados..."
        docker system prune -f
        
        echo "‚úÖ Despliegue completado"
        
    - name: Health check
      run: |
        echo "üè• Verificando salud de la aplicaci√≥n..."
        sleep 30
        if curl -f http://localhost:3000; then
          echo "‚úÖ Aplicaci√≥n funcionando correctamente"
        else
          echo "‚ùå Error: La aplicaci√≥n no responde"
          exit 1
        fi 
        